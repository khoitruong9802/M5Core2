// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.4.0
// LVGL version: 8.3.11
// Project name: m5core2

#include <M5Unified.h>

#include "../m5helper/brightness.h"
#include "../services/mqtt_service.h"
#include "../services/wifi_service.h"
#include "../services/schedule_service.h"
#include "global.h"
#include "services/ota_service.h"
#include "ui.h"
#include<stdio.h>

const char *get_json_device(uint8_t device1_status, uint8_t device2_status) {
  char *result = new char[256];
  snprintf(result, 256, "{\"station_id\":\"WATER_0001\",\"station_name\":\"WATER 0001\",\"devices\":[{\"device_id\":\"pump_0001\",\"device_name\":\"pump_0001\",\"device_value\":%d},{\"device_id\":\"pump_0002\",\"device_name\":\"pump_0002\",\"device_value\":%d}]}", device1_status, device2_status);
  return result;
}

void button2_on(lv_event_t *e) {
  // Your code here
  client.publish("khoitruong9802/feeds/nutnhan2", "1");

  // const char *publish_data = get_json_device(0, 1);
  // print(PRINTLN,publish_data);
  // client.publish("khoitruong9802/feeds/devices", publish_data);
  // delete[] publish_data;
}

void button2_off(lv_event_t *e) {
  // Your code
  client.publish("khoitruong9802/feeds/nutnhan2", "0");
}

void button1_on(lv_event_t *e) {
  // Your code here
  client.publish("khoitruong9802/feeds/nutnhan1", "1");
}

void button1_off(lv_event_t *e) {
  // Your code here
  client.publish("khoitruong9802/feeds/nutnhan1", "0");
}

void change_brightness(lv_event_t *e) {
  // Your code here
  lv_obj_t *slider = lv_event_get_target(e);
  uint8_t brightness = (int)lv_slider_get_value(slider);
  set_brightness(brightness);
}

void change_screen_mqtt(lv_event_t *e) {
  // Your code here
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t *target = lv_event_get_target(e);
  if (event_code == LV_EVENT_CLICKED) {
    if (WiFi.status() != WL_CONNECTED) {
      _ui_flag_modify(ui_Panel29, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
    } else {
      TaskHandle_t mqtt_task = xTaskGetHandle("mqtt_service");
      if (mqtt_task != NULL) {
        print(PRINTLN, "Mqtt has created");
        _ui_screen_change(&ui_MqttScreen, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_MqttScreen_screen_init);
      } else {
        xTaskCreate(mqtt_service, "mqtt_service", 4096, NULL, 1, NULL);
        _ui_flag_modify(ui_Panel40, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
      }
    }
  }
}

void cancel_start_mqtt(lv_event_t *e) {
  // Your code here
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t *target = lv_event_get_target(e);
  if (event_code == LV_EVENT_CLICKED) {
    _ui_flag_modify(ui_Panel40, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
    TaskHandle_t mqtt_task = xTaskGetHandle("mqtt_service");
    vTaskDelete(mqtt_task);
  }
}

void scan_network(lv_event_t *e) {
  // Your code here
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t *target = lv_event_get_target(e);
  if (event_code == LV_EVENT_CLICKED) {
    TaskHandle_t scan_wifi_task = xTaskGetHandle("scan_wifi");
    if (scan_wifi_task != NULL) {
      print(PRINTLN, "scan_wifi has created");
    } else {
      xTaskCreatePinnedToCore(scan_wifi, "scan_wifi", 8192, NULL, 5, NULL, 0);
    }
    _ui_screen_change(&ui_WifiScreen, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_WifiScreen_screen_init);
  }
}

void change_screen_ota(lv_event_t *e) {
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t *target = lv_event_get_target(e);
  _ui_screen_change(&ui_OtaScreen, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_OtaScreen_screen_init);
  TaskHandle_t ota_task = xTaskGetHandle("ota_update");
  if (ota_task == NULL) {
    if (WiFi.status() == WL_CONNECTED) {
      String filename = getLatestFirmwareFileName(web_server);
      for (;;) {
        if (!SPIFFS.begin(true)) {  // true to format the file system if mounting fails
          print(PRINTLN, "SPIFFS Mount Failed");
        } else {
          print(PRINTLN, "SPIFFS Mount Success");
          break;
        }
      }
      File file = SPIFFS.open("/firmware_version.txt", "r");
      if (!file) {
        print(PRINTLN, "Failed to open version file for checking");

      } else {
        print(PRINTLN, "File opened successfully");
        String line = file.readStringUntil('\n');
        file.close();
        print(PRINTLN, "The original:");
        print(PRINTLN, line.c_str());
        print(PRINTLN, "The new:");
        print(PRINTLN, filename.c_str());
        String name_of_old_file;
        String name_of_new_file;
        for (int i = 0; i < filename.length() && i < line.length(); i++) {
          name_of_new_file += filename[i];
          name_of_old_file += line[i];
        }
        if (name_of_new_file != name_of_old_file || name_of_old_file == NULL) {
          _ui_flag_modify(ui_Panel102, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
        } else {
          _ui_flag_modify(ui_Panel104, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
          print(PRINTLN, "No change!");
        }
      }
    }
  }
}

void handle_out_ota_page() {
  TaskHandle_t ota_task = xTaskGetHandle("ota_update");
  if (ota_task != NULL) {
    vTaskDelete(ota_task);
  }
  // Handle UI of OTA Page
  if (!lv_obj_has_flag(ui_Panel104, LV_OBJ_FLAG_HIDDEN)) {
    _ui_flag_modify(ui_Panel104, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
  }
  if (!lv_obj_has_flag(ui_Panel102, LV_OBJ_FLAG_HIDDEN)) {
    _ui_flag_modify(ui_Panel102, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
  }
  if (!lv_obj_has_flag(ui_Panel93, LV_OBJ_FLAG_HIDDEN)) {
    _ui_flag_modify(ui_Panel93, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
  }
}

void handle_start_ota() {
  _ui_flag_modify(ui_Panel93, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
  if (!lv_obj_has_flag(ui_Panel102, LV_OBJ_FLAG_HIDDEN)) {
    _ui_flag_modify(ui_Panel102, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
  }
  TaskHandle_t ota_task = xTaskGetHandle("ota_update");
  xTaskCreate(ota_update, "ota_update", 8192, NULL, 1, &ota_task);
}


void schedule_screen_init(lv_event_t * e)
{
    // Check wifi connection
    Serial.println("test1");
    if(WiFi.status() != WL_CONNECTED)
    {
        // Pop-up alert table to inform user of wifi connection issue
         _ui_flag_modify(ui_Panel29, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
    }
    else
    {
        Serial.println("test2");
         _ui_screen_change(&ui_ScheduleScreen, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_ScheduleScreen_screen_init);
        TaskHandle_t schedule_task = xTaskGetHandle("schedule_task");
        if(schedule_task == NULL)
        {
          Serial.println("test3");
          void *taskStackMemory = heap_caps_malloc(8192, MALLOC_CAP_SPIRAM); // Allocating in PSRAM

          if (taskStackMemory != nullptr) {
              BaseType_t result = xTaskCreatePinnedToCore(
                  handleScheduleUI,  // Function to execute
                  "schedule_task",   // Task name
                  8192,              // Stack size in bytes
                  NULL,              // Task parameter
                  1,                 // Priority
                  &schedule_task,    // Task handle
                  1                  // Core
              );

              if (result == pdPASS) {
                  Serial.println("Task created successfully in PSRAM.");
              } else {
                  Serial.println("Failed to create task.");
                  free(taskStackMemory); // Free memory if task creation failed
              }
          } else {
              Serial.println("Failed to allocate memory for the task stack in PSRAM.");
          }
        }
        else
        {
          Serial.println("test4");
        }
        Serial.println("test5");
    }
}

void deleteObject(lv_obj_t * obj)
{
    if (lv_obj_is_valid(obj)) 
    {
        lv_obj_clean(obj);
        lv_obj_remove_event_cb(obj, NULL);
        print(PRINTLN, "All LVGL objects are cleared!");
    }
    else
    {
        print(PRINTLN, "No LVGL objects to clear!");
    }
}

void clean_memory()
{
  lv_mem_monitor_t mon;
  lv_mem_monitor(&mon);
  Serial.printf("Used: %lu, Free: %lu, Fragmentation: %u%%\n",
                mon.total_size - mon.free_size, mon.free_size, mon.frag_pct);
}

void ui_event_DropdownClickedScheduleRepeatScheduleItem(lv_event_t * e)
{
  lv_obj_t * dropdown = lv_event_get_target(e);
  char buf[64];
  lv_dropdown_get_selected_str(dropdown, buf, sizeof(buf));
  if(strcmp(buf, "Once") == 0)
  {
    lv_obj_clear_flag(ui_PanelScheduleDateContainerScheduleItem, LV_OBJ_FLAG_HIDDEN); 
    lv_obj_add_flag(ui_PanelScheduleStartDateContainerScheduleItem, LV_OBJ_FLAG_HIDDEN); 
    lv_obj_add_flag(ui_PanelScheduleEndDateContainerScheduleItem, LV_OBJ_FLAG_HIDDEN); 
    lv_obj_add_flag(ui_PanelScheduleWeekContainerScheduleItem, LV_OBJ_FLAG_HIDDEN); 
  }
  else if (strcmp(buf, "Daily") == 0)
  {
    lv_obj_add_flag(ui_PanelScheduleDateContainerScheduleItem, LV_OBJ_FLAG_HIDDEN); 
    lv_obj_clear_flag(ui_PanelScheduleStartDateContainerScheduleItem, LV_OBJ_FLAG_HIDDEN); 
    lv_obj_clear_flag(ui_PanelScheduleEndDateContainerScheduleItem, LV_OBJ_FLAG_HIDDEN); 
    lv_obj_add_flag(ui_PanelScheduleWeekContainerScheduleItem, LV_OBJ_FLAG_HIDDEN); 
  }
  else if (strcmp(buf, "Weekly") == 0)
  {
    lv_obj_add_flag(ui_PanelScheduleDateContainerScheduleItem, LV_OBJ_FLAG_HIDDEN); 
    lv_obj_clear_flag(ui_PanelScheduleStartDateContainerScheduleItem, LV_OBJ_FLAG_HIDDEN); 
    lv_obj_clear_flag(ui_PanelScheduleEndDateContainerScheduleItem, LV_OBJ_FLAG_HIDDEN); 
    lv_obj_clear_flag(ui_PanelScheduleWeekContainerScheduleItem, LV_OBJ_FLAG_HIDDEN); 
  }
  lv_task_handler();
}

void ui_event_CheckboxScheduleEndDateScheduleItem(lv_event_t * e)
{
  lv_obj_t * checkbox = lv_event_get_target(e);
  bool is_checked = lv_obj_has_state(checkbox, LV_STATE_CHECKED);
  if (is_checked) {
    Serial.println("checked!!!");
    lv_obj_add_flag(ui_PanelScheduleEndDateScheduleItem, LV_OBJ_FLAG_HIDDEN); 
  }
  else
  {
    Serial.println("uncheck!!");
    lv_obj_clear_flag(ui_PanelScheduleEndDateScheduleItem, LV_OBJ_FLAG_HIDDEN); 
  }
  lv_task_handler();
}

void ui_event_PanelScheduleWeekItemMondayScheduleItem(lv_event_t * e)
{
  lv_color_t target_color = lv_color_hex(0x4264FF);   // Original color to check against
  lv_color_t new_color = lv_color_hex(0xFFFFFF);      // New color to change to
  lv_color_t bg_color = lv_obj_get_style_bg_color(ui_PanelScheduleWeekItemMondayScheduleItem, LV_PART_MAIN | LV_STATE_DEFAULT);
  if (bg_color.full == target_color.full) {
      // If it matches, set it to the new color
      lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemMondayScheduleItem, new_color, LV_PART_MAIN | LV_STATE_DEFAULT);
      Serial.println("Color changed to 0xFFFFFF");
  } else if (bg_color.full == new_color.full) {
      // If the color is already the new color, change it back to the target color
      lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemMondayScheduleItem, target_color, LV_PART_MAIN | LV_STATE_DEFAULT);
      Serial.println("Color changed back to 0x4264FF");
  } else {
      Serial.println("No color change was required.");
  }
  lv_task_handler();
}

void ui_event_PanelScheduleWeekItemTuesdayScheduleItem(lv_event_t * e)
{
    lv_color_t target_color = lv_color_hex(0x4264FF);   // Original color to check against
    lv_color_t new_color = lv_color_hex(0xFFFFFF);      // New color to change to
    lv_color_t bg_color = lv_obj_get_style_bg_color(ui_PanelScheduleWeekItemTuesdayScheduleItem, LV_PART_MAIN | LV_STATE_DEFAULT);
    if (bg_color.full == target_color.full) {
        lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemTuesdayScheduleItem, new_color, LV_PART_MAIN | LV_STATE_DEFAULT);
        Serial.println("Color changed to 0xFFFFFF");
    } else if (bg_color.full == new_color.full) {
        lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemTuesdayScheduleItem, target_color, LV_PART_MAIN | LV_STATE_DEFAULT);
        Serial.println("Color changed back to 0x4264FF");
    } else {
        Serial.println("No color change was required.");
    }
    lv_task_handler();
}

void ui_event_PanelScheduleWeekItemWednesdayScheduleItem(lv_event_t * e)
{
    lv_color_t target_color = lv_color_hex(0x4264FF);   // Original color to check against
    lv_color_t new_color = lv_color_hex(0xFFFFFF);      // New color to change to
    lv_color_t bg_color = lv_obj_get_style_bg_color(ui_PanelScheduleWeekItemWednesdayScheduleItem, LV_PART_MAIN | LV_STATE_DEFAULT);
    if (bg_color.full == target_color.full) {
        lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemWednesdayScheduleItem, new_color, LV_PART_MAIN | LV_STATE_DEFAULT);
        Serial.println("Color changed to 0xFFFFFF");
    } else if (bg_color.full == new_color.full) {
        lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemWednesdayScheduleItem, target_color, LV_PART_MAIN | LV_STATE_DEFAULT);
        Serial.println("Color changed back to 0x4264FF");
    } else {
        Serial.println("No color change was required.");
    }
    lv_task_handler();
}

void ui_event_PanelScheduleWeekItemThursdayScheduleItem(lv_event_t * e)
{
    lv_color_t target_color = lv_color_hex(0x4264FF);   // Original color to check against
    lv_color_t new_color = lv_color_hex(0xFFFFFF);      // New color to change to
    lv_color_t bg_color = lv_obj_get_style_bg_color(ui_PanelScheduleWeekItemThursdayScheduleItem, LV_PART_MAIN | LV_STATE_DEFAULT);
    if (bg_color.full == target_color.full) {
        lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemThursdayScheduleItem, new_color, LV_PART_MAIN | LV_STATE_DEFAULT);
        Serial.println("Color changed to 0xFFFFFF");
    } else if (bg_color.full == new_color.full) {
        lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemThursdayScheduleItem, target_color, LV_PART_MAIN | LV_STATE_DEFAULT);
        Serial.println("Color changed back to 0x4264FF");
    } else {
        Serial.println("No color change was required.");
    }
    lv_task_handler();
}

void ui_event_PanelScheduleWeekItemFridayScheduleItem(lv_event_t * e)
{
    lv_color_t target_color = lv_color_hex(0x4264FF);   // Original color to check against
    lv_color_t new_color = lv_color_hex(0xFFFFFF);      // New color to change to
    lv_color_t bg_color = lv_obj_get_style_bg_color(ui_PanelScheduleWeekItemFridayScheduleItem, LV_PART_MAIN | LV_STATE_DEFAULT);
    if (bg_color.full == target_color.full) {
        lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemFridayScheduleItem, new_color, LV_PART_MAIN | LV_STATE_DEFAULT);
        Serial.println("Color changed to 0xFFFFFF");
    } else if (bg_color.full == new_color.full) {
        lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemFridayScheduleItem, target_color, LV_PART_MAIN | LV_STATE_DEFAULT);
        Serial.println("Color changed back to 0x4264FF");
    } else {
        Serial.println("No color change was required.");
    }
    lv_task_handler();
}

void ui_event_PanelScheduleWeekItemSaturdayScheduleItem(lv_event_t * e)
{
    lv_color_t target_color = lv_color_hex(0x4264FF);   // Original color to check against
    lv_color_t new_color = lv_color_hex(0xFFFFFF);      // New color to change to
    lv_color_t bg_color = lv_obj_get_style_bg_color(ui_PanelScheduleWeekItemSaturdayScheduleItem, LV_PART_MAIN | LV_STATE_DEFAULT);
    if (bg_color.full == target_color.full) {
        lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemSaturdayScheduleItem, new_color, LV_PART_MAIN | LV_STATE_DEFAULT);
        Serial.println("Color changed to 0xFFFFFF");
    } else if (bg_color.full == new_color.full) {
        lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemSaturdayScheduleItem, target_color, LV_PART_MAIN | LV_STATE_DEFAULT);
        Serial.println("Color changed back to 0x4264FF");
    } else {
        Serial.println("No color change was required.");
    }
    lv_task_handler();
}

void ui_event_PanelScheduleWeekItemSundayScheduleItem(lv_event_t * e)
{
    lv_color_t target_color = lv_color_hex(0x4264FF);   // Original color to check against
    lv_color_t new_color = lv_color_hex(0xFFFFFF);      // New color to change to
    lv_color_t bg_color = lv_obj_get_style_bg_color(ui_PanelScheduleWeekItemSundayScheduleItem, LV_PART_MAIN | LV_STATE_DEFAULT);
    if (bg_color.full == target_color.full) {
        lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemSundayScheduleItem, new_color, LV_PART_MAIN | LV_STATE_DEFAULT);
        Serial.println("Color changed to 0xFFFFFF");
    } else if (bg_color.full == new_color.full) {
        lv_obj_set_style_bg_color(ui_PanelScheduleWeekItemSundayScheduleItem, target_color, LV_PART_MAIN | LV_STATE_DEFAULT);
        Serial.println("Color changed back to 0x4264FF");
    } else {
        Serial.println("No color change was required.");
    }
    lv_task_handler();
}

void ui_event_ButtonOKHeaderScheduleItem(lv_event_t * e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t * target = lv_event_get_target(e);
    if(event_code == LV_EVENT_CLICKED) 
    {
        const char * schedule_name_new = lv_label_get_text(ui_LabelNameScheduleItem);
        const char * description_new = lv_label_get_text(ui_LabelDescriptionScheduleItem);
        char area_new[64];
        lv_dropdown_get_selected_str(ui_DropdownAreaScheduleItem, area_new, sizeof(area_new));
        uint32_t priority_new = lv_slider_get_value(ui_SliderPriorityScheduleItem);
        const char * water_quantity_new = lv_label_get_text(ui_LabelWaterQuantityScheduleItem);
        const char * start_time_new = lv_label_get_text(ui_LabelScheduleStartTimeScheduleItem);
        const char * end_time_new = lv_label_get_text(ui_LabelScheduleEndTimeScheduleItem);
        const char * date_new = lv_label_get_text(ui_LabelNameScheduleItem);
        const char * start_date_new = lv_label_get_text(ui_LabelScheduleStartDateScheduleItem);
        const char * end_date_new = lv_label_get_text(ui_LabelScheduleEndDateScheduleItem);
        char repeat_new[64];
        lv_dropdown_get_selected_str(ui_DropdownScheduleRepeatScheduleItem, repeat_new, sizeof(repeat_new));        
        
        _ui_screen_change(&ui_ScheduleScreen, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_ScheduleScreen_screen_init);
    }
}
void ui_event_ButtonCancelHeaderScheduleItem(lv_event_t * e)
{
    lv_event_code_t event_code = lv_event_get_code(e);
    lv_obj_t * target = lv_event_get_target(e);
    if(event_code == LV_EVENT_CLICKED) {
        lv_indev_wait_release(lv_indev_get_act());
        _ui_screen_change(&ui_ScheduleScreen, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_ScheduleScreen_screen_init);
    }
}

void updatePageScheduleItem(int indexOfElement)
{
  for(int i = 0; i < 5; i++)
  {
    lv_obj_add_flag(jsonScheduleItemList[i].ui_PanelScheduleItemContainer, LV_OBJ_FLAG_HIDDEN);
  }

  JsonDocument jsonDocGlobal;

  DeserializationError error = deserializeJson(jsonDocGlobal, jsonString);
  if (error) 
  {
  Serial.println(error.c_str());
  }

  // Access the JSON array
  JsonArray jsonArray = jsonDocGlobal.as<JsonArray>();
  int minOfElement = (indexOfElement - 1) * 5;
  int maxOfElement = indexOfElement * 5;
  int index = 0;
  for(int i = minOfElement; i < maxOfElement && i < jsonArray.size(); i++)
  {
    // lv_obj_clear_flag(jsonScheduleItemList[index].ui_PanelScheduleItemContainer, LV_OBJ_FLAG_HIDDEN);
    const char * name = jsonArray[i]["schedule_name"].as<const char *>();
    int id = jsonArray[i]["id"].as<int>();
    const char *time = jsonArray[i]["start_time"].as<const char *>();
    int water_quantity = jsonArray[i]["water_quantity"].as<int>();
    const char * schedule_type = jsonArray[i]["schedule_type"].as<const char *>();
    const char * schedule_status = jsonArray[i]["status"].as<const char *>();
    jsonScheduleItemList[index].schedule_id = id;
    lv_label_set_text(jsonScheduleItemList[index].ui_LabelNameScheduleListItem, name);
    lv_label_set_text(jsonScheduleItemList[index].ui_LabelScheduleItem, time);
    char buffer[10];           // Ensure buffer is large enough to hold the string representation
    itoa(water_quantity, buffer, 10);     // Convert the int to a string (base 10)
    const char *str = buffer;  // Now 'str' is a const char* pointing to the string   
    strcat(buffer, " (ml)");  
    lv_label_set_text(jsonScheduleItemList[index].ui_LabelScheduleItemWaterQuantity, str);
    lv_label_set_text(jsonScheduleItemList[index].ui_LabelScheduleItemTimer, schedule_type);
    lv_obj_clear_flag(jsonScheduleItemList[index].ui_PanelScheduleItemContainer, LV_OBJ_FLAG_HIDDEN);
    index++;
  }
  jsonDocGlobal.clear();
  lv_task_handler();
}
void ui_event_PanelPageItemTitleScheduleScreen0(lv_event_t * e)
{
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t * target = lv_event_get_target(e);
  if(event_code == LV_EVENT_CLICKED) 
  {
    const char * max_index_c_tr = lv_label_get_text(ui_LabelPageItemTitleScheduleScreen[0]);
    currentOfElementHeader = atoi(max_index_c_tr);
    lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[0], lv_color_hex(0x4264FF), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[1], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[2], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
    updatePageScheduleItem(currentOfElementHeader);
    lv_task_handler();
  }
}
void ui_event_PanelPageItemTitleScheduleScreen1(lv_event_t * e)
{
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t * target = lv_event_get_target(e);
  if(event_code == LV_EVENT_CLICKED) 
  {
    const char * max_index_c_tr = lv_label_get_text(ui_LabelPageItemTitleScheduleScreen[1]);
    currentOfElementHeader = atoi(max_index_c_tr);
    lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[0], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[1], lv_color_hex(0x4264FF), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[2], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
    updatePageScheduleItem(currentOfElementHeader);
    lv_task_handler();    
  }
}
void ui_event_PanelPageItemTitleScheduleScreen2(lv_event_t * e)
{
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t * target = lv_event_get_target(e);
  if(event_code == LV_EVENT_CLICKED) 
  {
    const char * max_index_c_tr = lv_label_get_text(ui_LabelPageItemTitleScheduleScreen[2]);
    currentOfElementHeader = atoi(max_index_c_tr);
    lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[0], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[1], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[2], lv_color_hex(0x4264FF), LV_PART_MAIN | LV_STATE_DEFAULT);
    updatePageScheduleItem(currentOfElementHeader);
    lv_task_handler();    
  }
}



void ui_event_ButtonNextPageItemTitleScheduleScreen(lv_event_t *e)
{
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t * target = lv_event_get_target(e);
  if(event_code == LV_EVENT_CLICKED)
  {
    lv_obj_add_flag(ui_PanelPageItemTitleScheduleScreen[0], LV_OBJ_FLAG_HIDDEN);
    lv_obj_add_flag(ui_PanelPageItemTitleScheduleScreen[1], LV_OBJ_FLAG_HIDDEN);
    lv_obj_add_flag(ui_PanelPageItemTitleScheduleScreen[2], LV_OBJ_FLAG_HIDDEN);
    lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[0], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[1], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
    lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[2], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
    const char * max_index_c_tr = lv_label_get_text(ui_LabelPageItemTitleScheduleScreen[2]);
    int index = atoi(max_index_c_tr) + 1;

    for(int i = 0; i <= 2 && index <= numberOfPage; i++)
    {
      char buffer[10];           // Ensure buffer is large enough to hold the string representation
      itoa(index, buffer, 10);     // Convert the int to a string (base 10)
      const char *str = buffer;  // Now 'str' is a const char* pointing to the string
      lv_label_set_text(ui_LabelPageItemTitleScheduleScreen[i], buffer);
      if(index == currentOfElementHeader)
      {
        lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[i], lv_color_hex(0x4264FF), LV_PART_MAIN | LV_STATE_DEFAULT);
      }
      lv_obj_clear_flag(ui_PanelPageItemTitleScheduleScreen[i], LV_OBJ_FLAG_HIDDEN);
      index = index + 1;
    }  
    lv_task_handler();
  }
}

void ui_event_ButtonPreviousPageItemTitleScheduleScreen(lv_event_t *e)
{
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t * target = lv_event_get_target(e);
  if(event_code == LV_EVENT_CLICKED)
  {
    const char * max_index_c_tr = lv_label_get_text(ui_LabelPageItemTitleScheduleScreen[0]);
    int index = atoi(max_index_c_tr);
    if(index == 1)
    {
      return;
    }
    else
    {
      lv_obj_add_flag(ui_PanelPageItemTitleScheduleScreen[0], LV_OBJ_FLAG_HIDDEN);
      lv_obj_add_flag(ui_PanelPageItemTitleScheduleScreen[1], LV_OBJ_FLAG_HIDDEN);
      lv_obj_add_flag(ui_PanelPageItemTitleScheduleScreen[2], LV_OBJ_FLAG_HIDDEN);
      lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[0], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
      lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[1], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
      lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[2], lv_color_hex(0xFFFFFF), LV_PART_MAIN | LV_STATE_DEFAULT);
      index = index - 1;
      for(int i = 2; i >= 0; i--)
      {
        char buffer[10];           // Ensure buffer is large enough to hold the string representation
        itoa(index, buffer, 10);     // Convert the int to a string (base 10)
        const char *str = buffer;  // Now 'str' is a const char* pointing to the string
        lv_label_set_text(ui_LabelPageItemTitleScheduleScreen[i], buffer);
        if(index == currentOfElementHeader)
        {
          lv_obj_set_style_bg_color(ui_PanelPageItemTitleScheduleScreen[i], lv_color_hex(0x4264FF), LV_PART_MAIN | LV_STATE_DEFAULT);
        }
        lv_obj_clear_flag(ui_PanelPageItemTitleScheduleScreen[i], LV_OBJ_FLAG_HIDDEN);
        index = index - 1;
      }  
      lv_task_handler();
    }
    
  }
}