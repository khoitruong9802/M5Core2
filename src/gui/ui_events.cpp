// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.4.0
// LVGL version: 8.3.11
// Project name: m5core2

#include <M5Unified.h>

#include "../m5helper/brightness.h"
#include "../services/mqtt_service.h"
#include "../services/wifi_service.h"
#include "../services/schedule_service.h"
#include "global.h"
#include "services/ota_service.h"
#include "ui.h"

const char *get_json_device(uint8_t device1_status, uint8_t device2_status) {
  char *result = new char[256];
  snprintf(result, 256, "{\"station_id\":\"WATER_0001\",\"station_name\":\"WATER 0001\",\"devices\":[{\"device_id\":\"pump_0001\",\"device_name\":\"pump_0001\",\"device_value\":%d},{\"device_id\":\"pump_0002\",\"device_name\":\"pump_0002\",\"device_value\":%d}]}", device1_status, device2_status);
  return result;
}

void button2_on(lv_event_t *e) {
  // Your code here
  client.publish("khoitruong9802/feeds/nutnhan2", "1");

  // const char *publish_data = get_json_device(0, 1);
  // print(PRINTLN,publish_data);
  // client.publish("khoitruong9802/feeds/devices", publish_data);
  // delete[] publish_data;
}

void button2_off(lv_event_t *e) {
  // Your code
  client.publish("khoitruong9802/feeds/nutnhan2", "0");
}

void button1_on(lv_event_t *e) {
  // Your code here
  client.publish("khoitruong9802/feeds/nutnhan1", "1");
}

void button1_off(lv_event_t *e) {
  // Your code here
  client.publish("khoitruong9802/feeds/nutnhan1", "0");
}

void change_brightness(lv_event_t *e) {
  // Your code here
  lv_obj_t *slider = lv_event_get_target(e);
  uint8_t brightness = (int)lv_slider_get_value(slider);
  set_brightness(brightness);
}

void change_screen_mqtt(lv_event_t *e) {
  // Your code here
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t *target = lv_event_get_target(e);
  if (event_code == LV_EVENT_CLICKED) {
    if (WiFi.status() != WL_CONNECTED) {
      _ui_flag_modify(ui_Panel29, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
    } else {
      TaskHandle_t mqtt_task = xTaskGetHandle("mqtt_service");
      if (mqtt_task != NULL) {
        print(PRINTLN, "Mqtt has created");
        _ui_screen_change(&ui_MqttScreen, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_MqttScreen_screen_init);
      } else {
        xTaskCreate(mqtt_service, "mqtt_service", 4096, NULL, 1, NULL);
        _ui_flag_modify(ui_Panel40, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
      }
    }
  }
}

void cancel_start_mqtt(lv_event_t *e) {
  // Your code here
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t *target = lv_event_get_target(e);
  if (event_code == LV_EVENT_CLICKED) {
    _ui_flag_modify(ui_Panel40, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
    TaskHandle_t mqtt_task = xTaskGetHandle("mqtt_service");
    vTaskDelete(mqtt_task);
  }
}

void scan_network(lv_event_t *e) {
  // Your code here
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t *target = lv_event_get_target(e);
  if (event_code == LV_EVENT_CLICKED) {
    TaskHandle_t scan_wifi_task = xTaskGetHandle("scan_wifi");
    if (scan_wifi_task != NULL) {
      print(PRINTLN, "scan_wifi has created");
    } else {
      xTaskCreatePinnedToCore(scan_wifi, "scan_wifi", 8192, NULL, 5, NULL, 0);
    }
    _ui_screen_change(&ui_WifiScreen, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_WifiScreen_screen_init);
  }
}

void change_screen_ota(lv_event_t *e) {
  lv_event_code_t event_code = lv_event_get_code(e);
  lv_obj_t *target = lv_event_get_target(e);
  _ui_screen_change(&ui_OtaScreen, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_OtaScreen_screen_init);
  TaskHandle_t ota_task = xTaskGetHandle("ota_update");
  if (ota_task == NULL) {
    if (WiFi.status() == WL_CONNECTED) {
      String filename = getLatestFirmwareFileName(web_server);
      for (;;) {
        if (!SPIFFS.begin(true)) {  // true to format the file system if mounting fails
          print(PRINTLN, "SPIFFS Mount Failed");
        } else {
          print(PRINTLN, "SPIFFS Mount Success");
          break;
        }
      }
      File file = SPIFFS.open("/firmware_version.txt", "r");
      if (!file) {
        print(PRINTLN, "Failed to open version file for checking");

      } else {
        print(PRINTLN, "File opened successfully");
        String line = file.readStringUntil('\n');
        file.close();
        print(PRINTLN, "The original:");
        print(PRINTLN, line.c_str());
        print(PRINTLN, "The new:");
        print(PRINTLN, filename.c_str());
        String name_of_old_file;
        String name_of_new_file;
        for (int i = 0; i < filename.length() && i < line.length(); i++) {
          name_of_new_file += filename[i];
          name_of_old_file += line[i];
        }
        if (name_of_new_file != name_of_old_file || name_of_old_file == NULL) {
          _ui_flag_modify(ui_Panel102, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
        } else {
          _ui_flag_modify(ui_Panel104, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
          print(PRINTLN, "No change!");
        }
      }
    }
  }
}

void handle_out_ota_page() {
  TaskHandle_t ota_task = xTaskGetHandle("ota_update");
  if (ota_task != NULL) {
    vTaskDelete(ota_task);
  }
  // Handle UI of OTA Page
  if (!lv_obj_has_flag(ui_Panel104, LV_OBJ_FLAG_HIDDEN)) {
    _ui_flag_modify(ui_Panel104, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
  }
  if (!lv_obj_has_flag(ui_Panel102, LV_OBJ_FLAG_HIDDEN)) {
    _ui_flag_modify(ui_Panel102, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
  }
  if (!lv_obj_has_flag(ui_Panel93, LV_OBJ_FLAG_HIDDEN)) {
    _ui_flag_modify(ui_Panel93, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
  }
}

void handle_start_ota() {
  _ui_flag_modify(ui_Panel93, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
  if (!lv_obj_has_flag(ui_Panel102, LV_OBJ_FLAG_HIDDEN)) {
    _ui_flag_modify(ui_Panel102, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_ADD);
  }
  TaskHandle_t ota_task = xTaskGetHandle("ota_update");
  xTaskCreate(ota_update, "ota_update", 8192, NULL, 1, &ota_task);
}


void schedule_screen_init(lv_event_t * e)
{
    // Check wifi connection
    if(WiFi.status() != WL_CONNECTED)
    {
        // Pop-up alert table to inform user of wifi connection issue
         _ui_flag_modify(ui_Panel29, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
    }
    else
    {
        // Initialize the schedule screen
         _ui_flag_modify(ui_Panel40, LV_OBJ_FLAG_HIDDEN, _UI_MODIFY_FLAG_REMOVE);
         _ui_screen_change(&ui_ScheduleScreen, LV_SCR_LOAD_ANIM_FADE_ON, 500, 0, &ui_ScheduleScreen_screen_init);
        TaskHandle_t schedule_task = xTaskGetHandle("schedule_task");
        if(schedule_task == NULL)
        {
          xTaskCreate(handleScheduleUI, "schedule_task", 8192, NULL, 1, &schedule_task);
        }

    }
}

void deleteObject()
{
    if (lv_obj_is_valid(ui_ScheduleContainer)) 
    {
        lv_obj_clean(ui_ScheduleContainer);
        lv_obj_remove_event_cb(ui_ScheduleContainer, NULL);
        print(PRINTLN, "All LVGL objects are cleared!");
    }
    else
    {
        print(PRINTLN, "No LVGL objects to clear!");
    }
}

void event_handler(lv_event_t * e)
{
    lv_event_code_t code = lv_event_get_code(e);
    lv_obj_t * obj = lv_event_get_current_target(e);

    if(code == LV_EVENT_VALUE_CHANGED) {
        lv_calendar_date_t date;
        if(lv_calendar_get_pressed_date(obj, &date)) {
            Serial.printf("Clicked date: %02d.%02d.%d\n", date.day, date.month, date.year);
        }
    }
}

void schedule_service_init(lv_event_t * e) {
    lv_obj_t  * calendar = lv_calendar_create(lv_scr_act());
    lv_obj_set_size(calendar, 300, 250);
    lv_obj_align(calendar, LV_ALIGN_CENTER, 0, 27);
    lv_obj_add_event_cb(calendar, event_handler, LV_EVENT_ALL, NULL);

    lv_calendar_set_today_date(calendar, 2021, 02, 23);
    lv_calendar_set_showed_date(calendar, 2021, 02);

    /*Highlight a few days*/
    static lv_calendar_date_t highlighted_days[3];       /*Only its pointer will be saved so should be static*/
    highlighted_days[0].year = 2021;
    highlighted_days[0].month = 02;
    highlighted_days[0].day = 6;

    highlighted_days[1].year = 2021;
    highlighted_days[1].month = 02;
    highlighted_days[1].day = 11;

    highlighted_days[2].year = 2022;
    highlighted_days[2].month = 02;
    highlighted_days[2].day = 22;

    lv_calendar_set_highlighted_dates(calendar, highlighted_days, 3);

#if LV_USE_CALENDAR_HEADER_DROPDOWN
    lv_calendar_header_dropdown_create(calendar);
#elif LV_USE_CALENDAR_HEADER_ARROW
    lv_calendar_header_arrow_create(calendar);
#endif
    lv_calendar_set_showed_date(calendar, 2021, 10);
}

void ui_ScheduleItemScreen_screen_init(int schedule_id) 
{
    // Create a new screen for the detailed information
    lv_obj_t *schedule_item_screen = lv_obj_create(NULL);
    lv_scr_load(schedule_item_screen);

    // Create labels and other elements to show detailed information
    lv_obj_t *title_label = lv_label_create(schedule_item_screen);
    lv_label_set_text(title_label, "Schedule Details");
    lv_obj_align(title_label, LV_ALIGN_TOP_MID, 0, 10);

    // char buffer[100];
    // snprintf(buffer, sizeof(buffer), "%d",schedule_id);

    // lv_obj_t *detail_label = lv_label_create(schedule_item_screen);
    // lv_label_set_text(detail_label, buffer);
    // lv_obj_align(detail_label, LV_ALIGN_CENTER, 0, 20);

    // Add a back button to return to the main screen
    lv_obj_t *calendar_btn = lv_btn_create(schedule_item_screen);
    lv_obj_set_size(calendar_btn, 80, 40);
    lv_obj_align(calendar_btn, LV_ALIGN_CENTER,0, 20);
    lv_obj_t *calendar_button = lv_label_create(calendar_btn);
    lv_label_set_text(calendar_button, "Calendar");

    // Add a back button to return to the main screen
    lv_obj_t *back_btn = lv_btn_create(schedule_item_screen);
    lv_obj_set_size(back_btn, 80, 40);
    lv_obj_align(back_btn, LV_ALIGN_BOTTOM_MID, 0, -10);
    lv_obj_t *btn_label = lv_label_create(back_btn);
    lv_label_set_text(btn_label, "Back");
    lv_obj_add_event_cb(calendar_btn, schedule_service_init, LV_EVENT_CLICKED, (void *)schedule_id);
    lv_obj_add_event_cb(back_btn, [](lv_event_t *e) {
        // Navigate back to the previous screen (main screen)
        lv_scr_load(ui_ScheduleScreen); // Assuming ui_ScheduleScreen is your main screen object
    }, LV_EVENT_CLICKED, NULL);
}

